networks:
  default:
    name: elastic
services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: coordinator\n"\
          "    dns:\n"\
          "      - coordinator\n"\
          "    ip:\n"\
          "      - 10.30.1.143\n"\
          "  - name: master\n"\
          "    dns:\n"\
          "      - master\n"\
          "    ip:\n"\
          "      - 10.30.1.143\n"\
          "  - name: data\n"\
          "    dns:\n"\
          "      - data\n"\
          "    ip:\n"\
          "      - 10.30.1.143\n"\
          "  - name: data2\n"\
          "    dns:\n"\
          "      - data2\n"\
          "    ip:\n"\
          "      - 10.30.1.143\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "    ip:\n"\
          "      - 10.30.1.143\n"\
          "  - name: fleet-server\n"\
          "    dns:\n"\
          "      - fleet-server\n"\
          "    ip:\n"\
          "      - 10.30.1.143\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://coordinator:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://coordinator:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!"
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/coordinator/coordinator.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  master:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: master
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
      - ./elasticconfig/master.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./elasticdata/mastervolume:/usr/share/elasticsearch/data
      - ./elasticlogs/masterlogs:/usr/share/elasticsearch/logs
      - ./backups:/usr/share/elasticsearch/mount/backups
    environment:
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=master
      - discovery.seed_hosts=coordinator,data,data2
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/master/master.key
      - xpack.security.http.ssl.certificate=certs/master/master.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/master/master.key
      - xpack.security.transport.ssl.certificate=certs/master/master.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://coordinator:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  coordinator:
    depends_on:
      - master
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: coordinator
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
      - ./elasticconfig/coordinator.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./elasticlogs/coordlogs:/usr/share/elasticsearch/logs
    ports:
      - ${ES_PORT}:9200
    environment:
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=master
      - discovery.seed_hosts=master,data,data2
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/coordinator/coordinator.key
      - xpack.security.http.ssl.certificate=certs/coordinator/coordinator.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/coordinator/coordinator.key
      - xpack.security.transport.ssl.certificate=certs/coordinator/coordinator.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://coordinator:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  data:
    depends_on:
      - coordinator
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: data
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
      - ./elasticconfig/data.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./elasticdata/datavolume:/usr/share/elasticsearch/data
      - ./elasticlogs/datalogs:/usr/share/elasticsearch/logs
      - ./backups:/usr/share/elasticsearch/mount/backups
    environment:
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=master
      - discovery.seed_hosts=coordinator,master,data2
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/data/data.key
      - xpack.security.http.ssl.certificate=certs/data/data.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/data/data.key
      - xpack.security.transport.ssl.certificate=certs/data/data.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://coordinator:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  data2:
    depends_on:
      - data
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: data2
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
      - ./elasticconfig/data2.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./elasticdata/data2volume:/usr/share/elasticsearch/data
      - ./elasticlogs/data2logs:/usr/share/elasticsearch/logs
      - ./backups:/usr/share/elasticsearch/mount/backups
    environment:
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=master
      - discovery.seed_hosts=coordinator,master,data
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/data2/data2.key
      - xpack.security.http.ssl.certificate=certs/data2/data2.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/data2/data2.key
      - xpack.security.transport.ssl.certificate=certs/data2/data2.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://coordinator:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120


  kibana:
    depends_on:
      master:
        condition: service_healthy
      coordinator:
        condition: service_healthy
      data:
        condition: service_healthy
      data2:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: kibana
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - ./certs:/usr/share/kibana/config/certs
      - kibanavolume:/usr/share/kibana/
      - ./elasticconfig/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://coordinator:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_KIBANASERVER_HOSTNAME=kibana
      - SERVER_SSL_ENABLED=true
      - SERVER_SSL_CERTIFICATE=config/certs/kibana/kibana.crt
      - SERVER_SSL_KEY=config/certs/kibana/kibana.key
      - SERVER_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - ELASTIC_APM_SECRET_TOKEN=${ELASTIC_APM_SECRET_TOKEN}
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I --cacert config/certs/ca/ca.crt https://kibana:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  metricbeat:
    depends_on:
      master:
        condition: service_healthy
      coordinator:
        condition: service_healthy
      data:
        condition: service_healthy
      data2:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
    container_name: metricbeat
    user: root
    volumes:
      - ./certs:/usr/share/metricbeat/certs
      - ./elasticdata/metricbeatdata:/usr/share/metricbeat/data
      - "./elasticconfig/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/proc:/hostfs/proc:ro"
      - "/:/hostfs:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      #- ELASTIC_HOSTS=https://coordinator:9200
      - ELASTIC_HOSTS=https://coordinator:9200,https://master:9300,https://data:9300,https://data2:9300
      - KIBANA_HOSTS=https://kibana:5601
      - LOGSTASH_HOSTS=http://logstash:9600
      - CA_CERT=/usr/share/metricbeat/certs/ca/ca.crt
      - ES_CERT=/usr/share/metricbeat/certs/coordinator/coordinator.crt
      - ES_KEY=/usr/share/metricbeat/certs/coordinator/coordinator.key
      - KB_CERT=/usr/share/metricbeat/certs/kibana/kibana.crt
      - KB_KEY=/usr/share/metricbeat/certs/kibana/kibana.key
    command:
      -strict.perms=false

  filebeat:
    depends_on:
      master:
        condition: service_healthy
      coordinator:
        condition: service_healthy
      data:
        condition: service_healthy
      data2:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    container_name: filebeat
    user: root
    volumes:
      - ./certs:/usr/share/filebeat/certs
      - ./elasticdata/filebeatdata:/usr/share/filebeat/data
      - "./elasticlogs/masterlogs/:/var/log/elasticsearch/masterlogs/"
      - "./elasticlogs/coordlogs/:/var/log/elasticsearch/coordlogs/"
      - "./elasticlogs/datalogs/:/var/log/elasticsearch/datalogs/"
      - "./elasticlogs/data2logs/:/var/log/elasticsearch/data2logs/"
      - "./elasticconfig/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      #- ELASTIC_HOSTS=https://coordinator:9200
      - ELASTIC_HOSTS=https://coordinator:9200,https://master:9300,https://data:9300,https://data2:9300
      - KIBANA_HOSTS=https://kibana:5601
      - LOGSTASH_HOSTS=http://logstash:9600
      - CA_CERT=/usr/share/filebeat/certs/ca/ca.crt

  logstash:
    depends_on:
      master:
        condition: service_healthy
      coordinator:
        condition: service_healthy
      data:
        condition: service_healthy
      data2:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    container_name: logstash
    ports:
      - ${LOGSTASH_PORT}:9600
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - ./certs:/usr/share/logstash/certs
      - ./elasticdata/logstashdata:/usr/share/logstash/data
      - "./elasticconfig/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://coordinator:9200

  fleet-server:
    depends_on:
      kibana:
        condition: service_healthy
      master:
        condition: service_healthy
      coordinator:
        condition: service_healthy
      data:
        condition: service_healthy
      data2:
        condition: service_healthy
    image: docker.elastic.co/beats/elastic-agent:${STACK_VERSION}
    container_name: fleet-server
    labels:
      co.elastic.logs/module: elastic_agent
    volumes:
      - ./certs:/certs
      - fleetserverdata:/usr/share/elastic-agent
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    ports:
      - ${FLEET_PORT}:8220
      - ${APMSERVER_PORT}:8200
    user: root
    environment:
      - SSL_CERTIFICATE_AUTHORITIES=/certs/ca/ca.crt
      - CERTIFICATE_AUTHORITIES=/certs/ca/ca.crt
      - FLEET_CA=/certs/ca/ca.crt
      - FLEET_ENROLL=1
      - FLEET_SERVER_ELASTICSEARCH_CA=/certs/ca/ca.crt
      - FLEET_SERVER_ELASTICSEARCH_HOST=https://coordinator:9200
      - FLEET_SERVER_ENABLE=1
      - FLEET_SERVER_CERT=/certs/fleet-server/fleet-server.crt
      - FLEET_SERVER_CERT_KEY=/certs/fleet-server/fleet-server.key
      - FLEET_SERVER_POLICY_ID=fleet-server-policy
      - FLEET_URL=https://fleet-server:8220
      # el insecure es para permitir al apm mandar sus datos a traves de http
      - FLEET_SERVER_INSECURE_HTTP=true
      - KIBANA_FLEET_CA=/certs/ca/ca.crt
      - KIBANA_FLEET_SETUP=1
      - KIBANA_FLEET_USERNAME=elastic
      - KIBANA_FLEET_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_HOST=https://kibana:5601

volumes:
  fleetserverdata:
    driver: local
  kibanavolume:
    driver: local
